const holes = document.querySelectorAll('.hole');
const startButton = document.querySelector('.start-btn');
const scoreBoard = document.querySelector('.score');
const scoreCount = document.querySelector('.score-count');
const timeLeft = document.querySelector('.time-left');
const moles = document.querySelectorAll('.mole');
let lastHole;
let lastMole;
let timeUp = false;
let countdown;
let score = 0;

function randomTime(min, max) {
     // this func generates random number between 'min' and 'max',inclusive and returns it rounded to the nearest integer. This func is used to generate a random time
    return Math.round(Math.random() * (max - min) + min);
}

// a function for choosing a random hole from all the holes on the page. Can be achived by using Math.round()
// also we want the moles to comeout fro a different hole everytime, so we can create a var lastHole to check if the random hole is the same as the last one . IF so,the computer will randomly pick one.

function randomHole(holes) {
    const idx = Math.floor(Math.random() * holes.length);
    const hole = holes[idx];
    if (hole === lastHole) {
        console.log('Ah nah thats the same one bud');
        return randomHole(holes);
    }
    lastHole = hole;
    return hole;
}
// every mole pops up for a different duration too.
function peep() {
    const time = randomTime(200, 1000);
    const hole = randomHole(holes);
    hole.classList.add('up'); // css class 'up' given, which displays popping up
    setTimeout(() => {
        hole.classList.remove('up'); // after some time interval has passed the 'up' class is removed from the hole, causing it to disappear again. Finally if the timeUp var is not true the 'peep' function is called again recursively to repeat the process.
        if (!timeUp) peep();
    }, time);
}

function startGame(duration) {
    scoreCount.textContent = 0; // sets the DOM element with
    timeUp = false;   // this var is used later in the code to determine whether the game has ended or not.
    score = 0;        // will keep the track of the player's score during the game.
    startButton.textContent = 'RESTART!'; 
    scoreBoard.classList.remove('final');  // display players score
    peep();
    setTimeout(() => timeUp = true, duration * 1000);  //'setTimeout' functin to set a timer that will execute a function after a certain amount of time has elapsed. In this case 'timeUp' to 'true' the duration of the timer is determined by 'duration' argument passed to the 'startGame' function multipled by 1000 to convert from secs to millisec.
    
    timer(duration);
}

// to prevent some ppl from using progs to create fake clicks to cheat in this game we can use event'is Trusted to check if the user is cheating , The isTrusted property will return true when event was generated by a user action, and false when the event was created or modified by a script.

// if the user clicks fast enough on the same mole, he can score more than one point. To fix this we added a var to track if the user clicks on the same mole that has already clicked.
function bonk(e) {
    if (!e.isTrusted || lastMole === this) return;
    score++;
    lastMole = this;
    this.parentNode.classList.remove('up');
    scoreCount.textContent = score;
}

// adding timer from ydays project to show how much time is left
function timer(seconds) {
    clearInterval(countdown);

    const now = Date.now();
    const then = now + seconds * 1000;
    displayTimeLeft(seconds);

    countdown = setInterval(() => {
        const secondsLeft = Math.round((then - Date.now()) / 1000);

        if (secondsLeft < 0) {
            clearInterval(countdown);
            scoreBoard.classList.add('final');
            return;
        }
        displayTimeLeft(secondsLeft);
    }, 1000);
}

function displayTimeLeft(seconds) {
    const minutes = Math.floor(seconds / 60);
    const remainderSeconds = seconds % 60;
    const display = `${minutes}:${remainderSeconds < 10 ? '0' : ''}${remainderSeconds}`;
    document.title = display;
    timeLeft.textContent = display;
}

moles.forEach(mole => mole.addEventListener('click', bonk));